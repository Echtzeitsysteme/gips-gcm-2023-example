import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/LectureStudioModel/model/LectureStudioModel.ecore"

rule addClient(id:EString, sendBw:EDouble, receiveBw:EDouble) {
	++node: Node {
		.id := param::id
		.sendBandwidth := param::sendBw
		.receiveBandwidth := param::receiveBw	
		++ -data->data
	}
	
	++data: Data {
		.size := 0.0
	}
	
	lectureStudioServer: LectureStudioServer {
		-clientContainer-> clientContainer
	}

	clientContainer: ClientContainer {
		++ -nodes->node
	}
}

rule addWaitingClient(id:EString) {
	node: Node
	lectureStudioServer: LectureStudioServer {	
		-waitingClients-> waitingClientQueue
	}
	waitingClientQueue: WaitingClientQueue {
		++ -clients->node
	}
	
	#node.id == param::id
}

rule possibleConnection(serverId:EString, clientId:EString, bw:EDouble) {
	lectureStudioServer: LectureStudioServer {
		-clientContainer-> clientContainer
	}
	
	clientContainer: ClientContainer {
		++ -connectionData->connection
	}
	++connection: ConnectionData {
		.serverId := param::serverId
		.clientId := param::clientId
		.bandwidth := param::bw
	}
} 

rule removeConnectedClient(id:EString) {
	clientContainer: ClientContainer {
		---connections-> connection
	}
	--connection: Connection {
		---client->client
	}
	
	--client: Node
	
	#client.id == param::id		
}

rule removeConnectionFromServer(id:EString) {
	clientContainer: ClientContainer {
		---connections->connection
	}
	--connection: Connection {
		---server->server
	}
	
	server: Node
	
	#server.id == param::id		
}

rule removePossibleConnection() {
	clientContainer: ClientContainer {
		-- -connectionData->connection
	}
	--connection: ConnectionData
}
